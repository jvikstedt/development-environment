let g:python_host_prog = expand('~/.pyenv/versions/neovim2/bin/python')
let g:python3_host_prog = expand('~/.pyenv/versions/neovim3/bin/python')
let g:node_host_prog = expand('~/.nvm/versions/node/v12.13.1/bin/neovim-node-host')

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

Plug 'morhetz/gruvbox'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Syntax highlighting
Plug 'sheerun/vim-polyglot'

call plug#end()

" Colorscheme
set background=dark
colorscheme gruvbox

" Map leader key to space
noremap <Space> <NOP>
let mapleader = " "

map <S-k> <Nop>

" NERDTree
map <Leader>e :NERDTreeToggle<CR>

" Gitgutter
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

" CTRL+Arrows to resize splits
nnoremap <C-left> :vertical resize -5<cr>
nnoremap <C-down> :resize +5<cr>
nnoremap <C-up> :resize -5<cr>
nnoremap <C-right> :vertical resize +5<cr>

" Typos
command QW wq
command Qw wq
command W w
command Q q
command Qa qa
nnoremap K <NOP>

" Undo & history & swp files
set undofile
set undodir=~/.vim/undodir//
set history=1000
set backupdir=~/.vim/backupdir//
set directory=~/.vim/swapfiles//

" Show column 80
set colorcolumn=80

" CTRL+C to Close buffer
nnoremap <C-c> :bp\|bd #<CR>

" FZF shortcuts
nnoremap <C-p> :Files<CR>
nmap <Leader>b :Buffers<CR>
nmap <Leader>s :GFiles?<CR>
nmap <Leader>c :Commits<CR>
nmap <Leader>r :History:<CR>
nmap gs :Gstatus<CR>
nmap gc :Gcommit<CR>

" Linenumbers
set relativenumber
set number

" Encodings
set encoding=utf-8
set fileencoding=utf-8

" Timeouts
set timeoutlen=1000
set ttimeoutlen=0

" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Matching bracket
set showmatch

" Error Sounds
set noerrorbells
set novisualbell

" Scroll
set scrolloff=8
set sidescrolloff=15
set lazyredraw

" Wildmenu
set wildmode=longest,list,full
set wildmenu

" Highlight trailing spaces etc
set list listchars=tab:>-,trail:~,extends:>,precedes:<,nbsp:+
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" Tabs vs spaces
set ts=2
set shiftwidth=2
set expandtab
set nostartofline

" Search for word under cursor
nnoremap <silent> <Leader>ag :Ag <C-R><C-W><CR>

" if hidden is not set, TextEdit might fail.
set hidden

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Status bar
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set statusline=
set statusline+=%R                              " readonly flag
set statusline+=%M                              " modified [+] flag
set statusline+=%#Cursor#                       " colour
set statusline+=%#CursorLine#                   " colour
set statusline+=\ %t\                           " short file name
set statusline+=%{StatuslineGit()}              " git branch
set statusline+=%=                              " right align
set statusline+=%#CursorLine#                   " colour
set statusline+=\ %y\                           " file type
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
" Status bar end

"###### COC.nvim #######

"Extensions being used
"CocInstall coc-eslint coc-explorer coc-json coc-marketplace coc-prettier coc-tsserver coc-vetur

" Trigger autcomplete
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1
